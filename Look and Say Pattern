Given an integer n. Return the nth row of the following look-and-say pattern.
1
11
21
1211
111221
Look-and-Say Pattern:

To generate a member of the sequence from the previous member, read off the digits of the previous member,
counting the number of digits in groups of the same digit. For example:

1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
1211 is read off as "one 1, one 2, then two 1s" or 111221.
111221 is read off as "three 1s, two 2s, then one 1" or 312211.
Example 1:

Input:
n = 5
Output: 111221
Explanation: The 5th row of the given pattern
will be 111221.
Example 2:

Input:
n = 3
Output: 21
Explanation: The 3rd row of the given pattern
will be 21.



output:

Time complexity : O(N*N)   2 2 2 2 2
space complexity : O(N)
extra space to perform all the operations mentioned above, the space complexity of reading, 
editing, inserting, or deleting is constant i.e., O(1). Only the space taken to create the string is the auxiliary space. 



class Solution
{
  public:
    string func(int n)
    {
        string res="1",val="";
         int count=0;
         
        //loop for finding nth row
        for(int i=2;i<=n;i++)
        {
            //processing the values
            string temp="";
            int len=res.size();
            for(int i=0;i<len;i++)
            {
                if(res[i]==res[i+1] && i+1<len)
                {
                    count++;
                }
                else
                {
                    count++;
                    temp+=to_string(count);
                    temp+=res[i];
                    count=0;
                }
            }
            res=temp;
            count=0;
            // if(i==5)
            // return res;
        }
        return res;
    }
    string lookandsay(int n) {
          
          return func(n);
    }   
};
