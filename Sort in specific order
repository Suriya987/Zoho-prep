Given an array A of positive integers. Your task is to sort them in such a way that the first part of the array contains odd numbers sorted in descending order, rest portion contains even numbers sorted in ascending order.

 

Example 1:

Input:
N = 7
Arr = {1, 2, 3, 5, 4, 7, 10}
Output:
7 5 3 1 2 4 10
Explanation:
Array elements 7 5 3 1 are odd
and sorted in descending order,
whereas 2 4 10 are even numbers
and sorted in ascending order.
 

Example 2:

Input:
N = 7
Arr = {0, 4, 5, 3, 7, 2, 1}
Output:
7 5 3 1 0 2 4


Time complexity : O(N)
Space complexity : O(N)

Class Solution
{
  public:
    void sortIt(long long arr[], long long n)
    {
          //sort the given arr
          
         // 1 2 3 4 5 7 10
          vector<int>ans;
         // int n= sizeof(arr) / sizeof(arr[0]);
          
          sort(arr,arr+n);
          
          //for adding odd in desc
          for(int i=n-1;i>=0;i--)
          {
              if(arr[i]%2!=0)
              ans.push_back(arr[i]);
          }
          
          //for adding even in asc
          for(int i=0;i<n;i++)
          {
              if(arr[i]%2==0)
                ans.push_back(arr[i]);
          }
          
          //adding everything in the array itself
          
          for(int i=0;i<n;i++)
          {
              arr[i]=ans[i];
          }
    }
};
