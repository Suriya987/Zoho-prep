There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1



// class Solution {
// public:
//     int search(vector<int>& nums, int target) {
        
//         int n=nums.size();
//         int left=0,right=n-1;
//         int targetIndex=-1;

//         while(left<=right)
//         {
//             if(nums[left]==target) 
//             {
//                 targetIndex=left;
//                 break;
//             }
//             if(nums[right]==target)
//             {
//                 targetIndex=right;
//                 break;
//             }
//             //finding which one is closer to the target
//             int num1=abs(nums[left]-target);
//             int num2=abs(nums[right]-target);

//             if(num1>num2)
//              {
//                 right--;
//              }
//              else
//              left++;
//         }
//         return targetIndex;


//         // int n=nums.size();
//         // int targetIndex=-1;
//         // for(int i=0;i<n;i++)
//         // {
//         //     if(nums[i]==target){
//         //       targetIndex=i;
//         //     }
//         // }
//         // return targetIndex;
//     }
// };
/*
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0;
        int h = nums.size() - 1;
        while (l <= h) {
            int mid = (l + h) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            if (nums[l] <= nums[mid]) {
                if (target >= nums[l] && target < nums[mid]) {
                    h = mid - 1;
                } else {
                    l = mid + 1;
                }
            } else {
                if (target > nums[mid] && target <= nums[h])
                 {
                    l = mid + 1;
                } else {
                    h = mid - 1;
                }
            }
        }
        return -1;
    }
};
*/


class Solution {
public:
    int search(vector<int>& nums, int target) {
        
        int low=0,high=nums.size()-1;
        int n=nums.size();

        while(low<=high)
        {
            int mid=(low+high)/2;

            if(nums[mid]==target)  return mid;

            //going to eliminate which one is not sorted
            if(nums[low]<=nums[mid])
            {
                 //if it is sorted checking whether the value lies in between this
                 if(nums[low]<=target && target<nums[mid])
                 {
                      high=mid-1;
                 }
                 else
                   low=mid+1;
            }
            else
            {
                     if(target>nums[mid] && target<=nums[high])
                      {
                             low=mid+1;
                      }
                      else
                        high=mid-1;

            }
        }
        return -1;
    }
};
