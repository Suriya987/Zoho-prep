A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.

 

Example 1:

Input: s = "(()())(())"
Output: "()()()"
Explanation: 
The input string is "(()())(())", with primitive decomposition "(()())" + "(())".
After removing outer parentheses of each part, this is "()()" + "()" = "()()()".
Example 2:

Input: s = "(()())(())(()(()))"
Output: "()()()()(())"
Explanation: 
The input string is "(()())(())(()(()))", with primitive decomposition "(()())" + "(())" + "(()(()))".
After removing outer parentheses of each part, this is "()()" + "()" + "()(())" = "()()()()(())".
Example 3:

Input: s = "()()"
Output: ""
Explanation: 
The input string is "()()", with primitive decomposition "()" + "()".
After removing outer parentheses of each part, this is "" + "" = "".

Time complexity : O(N) -> Linear 
Space complexity : O(1) 

class Solution {
public:
    string removeOuterParentheses(string s) {
        int len=s.size();
        string res="";
        int open=0;
        for(int i=0;i<len;i++)
        {
            if(s[i]=='(' && open==0)
              open++;
            else if(s[i]=='(' && open>0)
             {
                res+='(';
                open++;
             }
             else if(s[i]==')' && open>1)
             {
                res+=')';
                open--;
             }
             else if(s[i]==')' && open==1)
             open--;
        } 
        return res;
    }
};

/*
//this code is for balanced parentheses
        string res="";
        int len=s.size();
        int open=0;
        for(int i=0;i<len;i++)
        {
            if(s[i]=='(')  open=1;
            else if(s[i]=='(' && open==1)
             continue;
             else if(s[i]==')' && open==1)
             {
                res+='(';
                res+=')';
                open=0;
             }
        }
        return res;
        */
