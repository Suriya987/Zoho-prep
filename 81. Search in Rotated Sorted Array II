81. Search in Rotated Sorted Array II

There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.

 

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
nums is guaranteed to be rotated at some pivot.
-104 <= target <= 104
 

Follow up: This problem is similar to Search in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?

Time complexity : O(LOG N) but in some cases  where 3,3,3,3,3  target = 2 but we dont have target until low<= high crosses it is going to perform operation take O(N/2)
space complexity  : O(1)


class Solution {
public:
    bool search(vector<int>& nums, int target) {
        
        int low=0,high=nums.size()-1;
        int n=nums.size();

        while(low<=high)
        {
            int mid=(low+high)/2;

            if(nums[mid]==target)  return true;
            if((nums[mid]==nums[low]) && nums[low]==nums[high])
              {
                low++;
                high--;
              }
              else{
            //going to eliminate which one is not sorted
            if(nums[low]<=nums[mid])
            {
                 //if it is sorted checking whether the value lies in between this
                 if(nums[low]<=target && target<nums[mid])
                 {
                      high=mid-1;
                 }
                 else
                   low=mid+1;
            }
            else
            {
                     if(target>nums[mid] && target<=nums[high])
                      {
                             low=mid+1;
                      }
                      else
                        high=mid-1;

            }
        }
        }
        return false;
    }
};
