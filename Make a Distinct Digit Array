Given an array nums of positive integers of size N. Find all distinct digits present in nums.
 

Example 1:

Input: nums = [131, 11, 48]
Output: 1 3 4 8
Explanation: 1, 3, 4, and 8 are only distinct
digits that can be extracted from the numbers
of the array.
Example 2:

Input: nums = [111, 222, 333, 4444, 666]
Output: 1 2 3 4 6
Explanation: 1, 2, 3, 4, and 6 are only distinct
digits that can be extracted from the numbers
of the array.

Time complexity : O(N) 
Space Complexity : O(N) + O(10) 

class Solution{
	public:
   	vector<int> common_digits(vector<int>nums){
   	      
   	       // push the num if it is not present in the ans vector
   	       // num is always have more than a digit
   	      vector<int>ans;
   	      //if (std::find(v.begin(), v.end(),value)!=v.end())
   	      int n=nums.size();
   	    vector<int>temp(10,0);
   	for(int i=0;i<n;i++)
   	{
   	    int num=nums[i];
   	    while(num)
   	    {
   	        int tem=num%10;
   	        // if(find(ans.begin(),ans.end(),temp)==ans.end())
   	        // {
   	        //     ans.push_back(temp);
   	        // }
   	        temp[tem]=1;
   	        num=num/10;
   	    }
   	}
   	
   	for(int i=0;i<10;i++)
   	  {
   	      if(temp[i]==1)  
   	         ans.push_back(i);
   	  }
   	//sort(ans.begin(),ans.end());
   	return ans;
  }
};
