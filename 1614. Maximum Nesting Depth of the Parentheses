Given a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses.

 

Example 1:

Input: s = "(1+(2*3)+((8)/4))+1"

Output: 3

Explanation:

Digit 8 is inside of 3 nested parentheses in the string.

Example 2:

Input: s = "(1)+((2))+(((3)))"

Output: 3

Explanation:

Digit 3 is inside of 3 nested parentheses in the string.

Example 3:

Input: s = "()(())((()()))"

Output: 3

Time complexity : O(N)
Space complexity : O(1)

class Solution {
public:
    int maxDepth(string s) {
        int  len=s.size();
        int open=0,maxi=0;

        for(int i=0;i<len;i++)
        {
            if(s[i]=='(')
              open++;
            else if(s[i]==')')
            {
                maxi=max(open,maxi);
                open--;
            }
        }
      return maxi;      
    }
};
